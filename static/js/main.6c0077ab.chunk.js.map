{"version":3,"sources":["Header.js","Character.js","ListContainer.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleEdit","ev","char","objectSpread","state","editable","setState","setTimeout","refs","name","value","verse","universe","updateName","updateItem","deleteItem","id","character","ref","onClick","ListContainer","characters","map","Character_Character","key","AddForm","addChar","preventDefault","obj","Date","now","addItem","App","item","chars","push","c","filter","el","react","Header_Header","ListContainer_ListContainer","AddForm_AddForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c0077ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class Header extends Component{\n  \n    render(){\n        return(\n            <header className=\"mainHeader\">\n                <h1>Favorite Anime Characters</h1>\n            </header>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\n\nexport default class Character extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n                id: this.props.character.id, \n                name: this.props.character.name, \n                universe: this.props.character.universe, \n                editable: this.props.character.editable\n                \n\n        }\n    }\n\n    toggleEdit = (ev) =>{\n        let char = {...this.state}\n        char.editable = \"true\";\n        this.setState({...char})\n        setTimeout(()=>{\n            this.refs.name.value = this.state.name;\n            this.refs.verse.value = this.state.universe;\n        }, 10)\n        \n       \n    }\n\n    updateName = (ev) =>{\n        let char = {...this.state}\n        char.name = this.refs.name.value\n        char.universe = this.refs.verse.value\n        char.editable = \"false\"\n        this.setState({...char})\n        this.props.updateItem(char);\n\n    }\n\n    deleteItem = (ev) =>{\n        let char = {...this.state}\n        this.props.deleteItem(char)\n    }\n    render(){\n\n        return(\n        <li className=\"character\">\n            <div className={this.state.editable}>\n            <div className=\"labels\">\n            <p ref=\"nameLabel\" className=\"nameLabel\">Name: {this.state.name}</p>\n            <p ref=\"verseLabel\" className=\"verseLabel\">Show: {this.state.universe}</p>\n            </div>\n            <div className=\"buttons\">\n            <button onClick={this.toggleEdit}>Edit</button><br/>\n            <button onClick={this.deleteItem}>Delete</button>\n            </div>\n            </div>\n            {\n            this.state.editable ===\"true\" &&\n            <form className=\"charForm\">\n                <input className=\"name\" ref=\"name\"/>\n                <input className=\"verse\" ref=\"verse\"/>\n                <button onClick={this.updateName} className=\"save\">Save</button>\n            </form>\n            }\n        </li>\n        )\n    }\n}\n","import React, { Component} from 'react';\nimport './App.css';\nimport Character from './Character';\n\n\nexport default class ListContainer extends Component{\n\n    render(){\n        return(\n        <div className=\"Container\">\n        <h1>Characters</h1>\n        <ul className=\"ul\">\n        {this.props.characters.map( (character) =>\n        <Character deleteItem={this.props.deleteItem} updateItem={this.props.updateItem} key={character.id} character={character}/>\n        )}\n        </ul>\n        </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\n\nexport default class AddForm extends Component{\n    addChar = (ev) =>{\n    ev.preventDefault()\n    let obj = {id: Date.now(), name: this.refs.name.value, universe: this.refs.verse.value, editable: \"false\"}\n    this.props.addItem(obj);\n    this.refs.name.value = \"\"\n    this.refs.verse.value = \"\"\n    }\n    render(){\n        return(\n            <div className=\"formDiv\">\n            <h1 className=\"addChar\">Add Character</h1>\n                <form  className=\"mainForm\">\n                    <p className=\"characterLabel\">Character Name\n                    <input ref=\"name\"/>\n                    </p>\n                    \n                    <p className=\"showLabel\">Show Name\n                    <input ref=\"verse\"/>\n                    </p>\n                </form>\n                <button className=\"saveButton\" onClick={this.addChar}>Save</button>\n            </div>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport Header from './Header';\nimport ListContainer from './ListContainer';\nimport AddForm from './AddForm';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      characters: [\n          {id: 1, name: \"Ichigo\", universe: \"Bleach\", editable: \"false\" },\n          {id: 2, name: \"Sasuke\", universe: \"Naruto\", editable: \"false\" },\n          {id: 3, name: \"Goku\", universe: \"Dragonball\", editable: \"false\" }\n      ]\n    }\n  }\n\n  addItem = (item) =>{\n    let chars = {...this.state};\n    chars.characters.push(item);\n    this.setState({characters:chars.characters})\n   \n  }\n\n  updateItem = (item) =>{\n    let char = this.state.characters.map((c) => {\n      if(c.id === item.id){\n        c.name = item.name\n        c.universe = item.universe\n      }\n      return c\n    })\n    this.setState({characters:char})\n  }\n\n  deleteItem = (item) =>{\n    let chars = this.state.characters\n    chars = chars.filter((el)=>{\n      return el.id !== item.id;\n    })\n    this.setState({characters: chars});\n  }\n\n  render() {\n    return (    \n      <Fragment>\n      <Header/>\n      <main className=\"main\">\n      <ListContainer updateItem={this.updateItem} deleteItem={this.deleteItem} characters={this.state.characters}>\n      </ListContainer>\n      <AddForm addItem={this.addItem}>\n      </AddForm>\n      </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}